// /home/ubuntu/book_website/src/app/chapter1/page.tsx
"use client";

import Image from "next/image";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

const plots = [
  {
    id: "simpleLCG",
    title: "Simple Linear Congruential Generator (LCG) Sequence",
    description: "This plot shows the first 10 values generated by a simple LCG with the formula X_{n+1} = (3*X_n + 1) mod 8, starting with a seed X_0 = 5. LCGs are a basic type of pseudo-random number generator.",
    image: "/images/ch1/simpleLCG.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_simple_lcg():
    X = [5] # Seed X0 = 5
    a, c, m = 3, 1, 8
    n_steps = 10
    for _ in range(n_steps - 1):
        X.append((a * X[-1] + c) % m)
    
    plt.figure(figsize=(8, 2))
    plt.plot(range(n_steps), X, marker=".", markersize=10, linestyle="None", color="black")
    plt.xticks(range(n_steps))
    plt.yticks(np.arange(0, m, 2))
    plt.xlabel("Step (n)")
    plt.ylabel("LCG Value (X_n)")
    plt.title("Sequence from LCG: X_{n+1} = (3*X_n + 1) mod 8, X_0 = 5")
    plt.grid(True, axis="y", linestyle=":", color="gray")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "simpleLCG.png"))
    plt.close()

plot_simple_lcg()`,
  },
  {
    id: "lln_coin_toss",
    title: "Law of Large Numbers (LLN): Coin Toss Frequency",
    description: "This plot illustrates the Law of Large Numbers by simulating 1000 fair coin tosses. It shows how the frequency of heads converges towards the expected probability of 0.5 as the number of tosses increases (note the logarithmic x-axis).",
    image: "/images/ch1/01experiment1.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_coin_toss_frequency():
    np.random.seed(42) # for reproducibility
    n_tosses = 1000
    tosses = np.random.randint(0, 2, size=n_tosses) # 0=Heads, 1=Tails
    cumulative_heads = np.cumsum(tosses == 0)
    frequencies = cumulative_heads / np.arange(1, n_tosses + 1)
    
    plt.figure(figsize=(8, 4))
    plt.plot(range(1, n_tosses + 1), frequencies, color="black", linewidth=1)
    plt.axhline(0.5, color="dimgray", linestyle="--", label="Expected Probability (0.5)")
    plt.xlabel("Number of Tosses")
    plt.ylabel("Frequency of Heads")
    plt.title("Law of Large Numbers: Convergence of Coin Toss Frequency")
    plt.ylim(0, 1)
    plt.xscale("log")
    plt.grid(True, axis="y", linestyle=":", color="gray")
    plt.legend()
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01experiment1.png"))
    plt.close()

plot_coin_toss_frequency()`,
  },
  {
    id: "poisson_pmf",
    title: "Poisson Probability Mass Function (PMF)",
    description: "This plot shows the PMF of a Poisson distribution with parameter lambda = 3. The Poisson distribution models the probability of a given number of events occurring in a fixed interval of time or space.",
    image: "/images/ch1/01poissonpdf.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import poisson
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_poisson_pmf():
    lambda_param = 3
    k = np.arange(0, 11)
    pmf = poisson.pmf(k, lambda_param)
    
    plt.figure(figsize=(8, 4))
    plt.stem(k, pmf, linefmt="gray", markerfmt="ko", basefmt=" ")
    plt.xlabel("k")
    plt.ylabel("P(X=k)")
    plt.title(fr"Poisson PMF ($\lambda={lambda_param}$)")
    plt.xticks(k)
    plt.grid(True, axis="y", linestyle=":", color="gray")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01poissonpdf.png"))
    plt.close()

plot_poisson_pmf()`,
  },
  {
    id: "uniform_cdf",
    title: "Uniform Cumulative Distribution Function (CDF)",
    description: "This plot shows the CDF of a continuous uniform distribution on the interval [0, 1]. The CDF gives the probability that the random variable is less than or equal to a certain value x.",
    image: "/images/ch1/01uniform_cdf_plot.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import uniform
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_uniform_cdf():
    x = np.linspace(-0.2, 1.2, 400)
    cdf = uniform.cdf(x, loc=0, scale=1)
    
    plt.figure(figsize=(8, 4))
    plt.plot(x, cdf, color="black")
    plt.xlabel("x")
    plt.ylabel("F(x) = P(X <= x)")
    plt.title("Uniform CDF on [0, 1]")
    plt.grid(True, linestyle=":", color="gray")
    plt.ylim(-0.05, 1.05)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01uniform_cdf_plot.png"))
    plt.close()

plot_uniform_cdf()`,
  },
  {
    id: "exponential_pdf",
    title: "Exponential Probability Density Function (PDF)",
    description: "This plot shows the PDF of an exponential distribution with rate parameter lambda = 1. The exponential distribution often models the time until an event occurs in a Poisson point process.",
    image: "/images/ch1/01exponentialpdf.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import expon
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_exponential_pdf():
    lambda_param = 1.0
    x = np.linspace(0, 5, 400)
    pdf = expon.pdf(x, scale=1/lambda_param) # scale is 1/lambda
    
    plt.figure(figsize=(8, 4))
    plt.plot(x, pdf, color="black")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title(fr"Exponential PDF ($\lambda={lambda_param}$)")
    plt.grid(True, linestyle=":", color="gray")
    plt.ylim(bottom=0)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01exponentialpdf.png"))
    plt.close()

plot_exponential_pdf()`,
  },
  {
    id: "normal_pdf",
    title: "Normal (Gaussian) Probability Density Function (PDF)",
    description: "This plot shows the PDF of a standard normal distribution (mean mu = 0, standard deviation sigma = 1). The normal distribution is fundamental in statistics due to the Central Limit Theorem.",
    image: "/images/ch1/01normalpdf.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_normal_pdf():
    mu, sigma = 0, 1
    x = np.linspace(-4, 4, 400)
    pdf = norm.pdf(x, loc=mu, scale=sigma)
    
    plt.figure(figsize=(8, 4))
    plt.plot(x, pdf, color="black")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title(fr"Normal PDF ($\mu={mu}, \sigma={sigma}$)")
    plt.grid(True, linestyle=":", color="gray")
    plt.ylim(bottom=0)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01normalpdf.png"))
    plt.close()

plot_normal_pdf()`,
  },
  {
    id: "bernoulli_cdf",
    title: "Bernoulli Cumulative Distribution Function (CDF)",
    description: "This plot shows the CDF of a Bernoulli distribution with success probability p = 0.5. The Bernoulli distribution models a single trial with two outcomes (e.g., success/failure, head/tail).",
    image: "/images/ch1/01bernoulli_cdf_plot.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import bernoulli
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_bernoulli_cdf():
    p = 0.5
    x = [-0.5, 0, 0, 1, 1, 1.5]
    cdf = [0, 0, 1-p, 1-p, 1, 1]
    
    plt.figure(figsize=(8, 4))
    plt.plot(x, cdf, drawstyle="steps-post", color="black")
    plt.scatter([0, 1], [1-p, 1], color="black", zorder=5) # Closed points
    plt.scatter([0, 1], [0, 1-p], facecolors="none", edgecolors="black", zorder=5) # Open points
    plt.xlabel("x")
    plt.ylabel("F(x) = P(X <= x)")
    plt.title(f"Bernoulli CDF (p={p})")
    plt.grid(True, linestyle=":", color="gray")
    plt.yticks([0, 1-p, 1])
    plt.xticks([0, 1])
    plt.ylim(-0.05, 1.05)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01bernoulli_cdf_plot.png"))
    plt.close()

plot_bernoulli_cdf()`,
  },
  {
    id: "lln_illustration",
    title: "Illustration of the Law of Large Numbers (LLN)",
    description: "This plot provides a generic illustration of the LLN using the sample mean of 1000 Exponential(1) random variables. It shows the sample mean converging to the true mean (1.0) as the number of samples increases.",
    image: "/images/ch1/01LLM.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_lln_illustration():
    np.random.seed(123)
    n_samples = 1000
    samples = np.random.exponential(scale=1.0, size=n_samples)
    sample_means = np.cumsum(samples) / np.arange(1, n_samples + 1)
    
    plt.figure(figsize=(8, 4))
    plt.plot(range(1, n_samples + 1), sample_means, color="black", linewidth=1)
    plt.axhline(1.0, color="dimgray", linestyle="--", label="True Mean (1.0)")
    plt.xlabel("Number of Samples (n)")
    plt.ylabel(r"Sample Mean ($\bar{X}_n$)")
    plt.title("Illustration of the Law of Large Numbers")
    plt.xscale("log")
    plt.grid(True, axis="y", linestyle=":", color="gray")
    plt.legend()
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01LLM.png"))
    plt.close()

plot_lln_illustration()`,
  },
  {
    id: "clt_illustration",
    title: "Illustration of the Central Limit Theorem (CLT)",
    description: "This plot illustrates the CLT using the distribution of 10,000 sample means, each calculated from 30 Uniform(0,1) random variables. The histogram of the standardized sample means closely approximates the standard normal distribution PDF, as predicted by the CLT.",
    image: "/images/ch1/01CLT.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_clt_illustration():
    np.random.seed(456)
    n_experiments = 10000
    sample_size = 30
    sample_means = np.mean(np.random.rand(n_experiments, sample_size), axis=1)
    
    mu = 0.5
    sigma = np.sqrt(1/12)
    standardized_means = (sample_means - mu) / (sigma / np.sqrt(sample_size))
    
    x = np.linspace(-4, 4, 200)
    normal_pdf = norm.pdf(x, 0, 1)
    
    plt.figure(figsize=(8, 4))
    plt.hist(standardized_means, bins=30, density=True, color="lightgray", edgecolor="black", label="Histogram of Standardized Sample Means")
    plt.plot(x, normal_pdf, color="black", linestyle="-", label="Standard Normal PDF")
    plt.xlabel("Standardized Sample Mean")
    plt.ylabel("Density")
    plt.title(f"Illustration of the Central Limit Theorem (n={sample_size})")
    plt.legend()
    plt.grid(True, axis="y", linestyle=":", color="gray")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "01CLT.png"))
    plt.close()

plot_clt_illustration()`,
  },
  {
    id: "monte_carlo_pi",
    title: "Monte Carlo Estimation of Pi",
    description: "This plot visualizes the Monte Carlo method for estimating Pi. Random points are generated within a square enclosing a unit circle. The ratio of points falling inside the circle to the total number of points approximates Pi/4.",
    image: "/images/ch1/montecarlo1.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_monte_carlo_pi():
    np.random.seed(789)
    n_points = 2000
    x = np.random.uniform(-1, 1, n_points)
    y = np.random.uniform(-1, 1, n_points)
    inside = (x**2 + y**2) <= 1
    
    plt.figure(figsize=(6, 6))
    plt.scatter(x[inside], y[inside], color="black", s=1, label="Inside Circle")
    plt.scatter(x[~inside], y[~inside], color="silver", s=1, label="Outside Circle")
    
    theta = np.linspace(0, 2*np.pi, 100)
    plt.plot(np.cos(theta), np.sin(theta), color="dimgray", linestyle="--")
    
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title(f"Monte Carlo Estimation of $\pi$ (N={n_points})")
    plt.axis("equal")
    plt.xlim(-1, 1)
    plt.ylim(-1, 1)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "montecarlo1.png"))
    plt.close()

plot_monte_carlo_pi()`,
  },
  {
    id: "monte_carlo_x2",
    title: "Monte Carlo Integration of x^2",
    description: "This plot visualizes Monte Carlo integration to estimate the integral of f(x) = x^2 from 0 to 1. Random points are generated in the unit square [0,1]x[0,1]. The fraction of points falling below the curve y=x^2 approximates the integral.",
    image: "/images/ch1/montecarlo2.png",
    code: `import matplotlib.pyplot as plt
import numpy as np
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def plot_monte_carlo_x_squared():
    np.random.seed(101)
    n_points = 1000
    x_rand = np.random.uniform(0, 1, n_points)
    y_rand = np.random.uniform(0, 1, n_points)
    below = y_rand <= x_rand**2
    
    plt.figure(figsize=(6, 6))
    plt.scatter(x_rand[below], y_rand[below], color="black", s=2, label="Below $y=x^2$")
    plt.scatter(x_rand[~below], y_rand[~below], color="silver", s=2, label="Above $y=x^2$")
    
    x_curve = np.linspace(0, 1, 100)
    y_curve = x_curve**2
    plt.plot(x_curve, y_curve, color="dimgray", linestyle="--", label="$y=x^2$")
    
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title(f"Monte Carlo Integration of $x^2$ (N={n_points})")
    plt.axis("equal")
    plt.xlim(0, 1)
    plt.ylim(0, 1)
    plt.legend(loc="upper left")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "montecarlo2.png"))
    plt.close()

plot_monte_carlo_x_squared()`,
  },
  {
    id: "random_graphs",
    title: "Random Graphs from LCG Output",
    description: "These plots show random graphs generated based on pseudo-random numbers from an LCG. An edge between two nodes exists if the corresponding random number is below a certain threshold (p). Different thresholds (0.2, 0.4, 0.6) result in graphs with varying connectivity.",
    image: [
      "/images/ch1/random_graph_p02.png",
      "/images/ch1/random_graph_p04.png",
      "/images/ch1/random_graph_p06.png",
    ],
    code: `import matplotlib.pyplot as plt
import numpy as np
import networkx as nx
import os

output_dir = "./Images"
os.makedirs(output_dir, exist_ok=True)
plt.style.use("grayscale")

def generate_lcg_sequence(seed, a, c, m, n):
    numbers = []
    current_x = seed
    for _ in range(n):
        current_x = (a * current_x + c) % m
        numbers.append(current_x)
    return numbers

def plot_random_graphs():
    a = 1664525
    c = 1013904223
    m = 2**32
    seed = 42
    n_edges_needed = 6
    
    lcg_raw = generate_lcg_sequence(seed, a, c, m, n_edges_needed)
    lcg_uniform = [x / m for x in lcg_raw]
    
    nodes = [1, 2, 3, 4]
    potential_edges = [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]
    edge_values = dict(zip(potential_edges, lcg_uniform))
    
    thresholds = [0.2, 0.4, 0.6]
    
    for p in thresholds:
        G = nx.Graph()
        G.add_nodes_from(nodes)
        for edge, value in edge_values.items():
            if value <= p:
                G.add_edge(edge[0], edge[1])
                
        plt.figure(figsize=(5, 5))
        pos = nx.circular_layout(G)
        nx.draw(G, pos, 
                with_labels=True, 
                node_color="lightgray", 
                node_size=1000, 
                edge_color="black", 
                width=1.5, 
                font_size=12, 
                font_color="black")
        plt.title(f"Random Graph (4 Nodes) from LCG, Threshold p={p}")
        plt.tight_layout()
        filename = f"random_graph_p{str(p).replace('.', '')}.png"
        plt.savefig(os.path.join(output_dir, filename))
        plt.close()

plot_random_graphs()`,
  },
];

export default function Chapter1Page() {
  return (
    <main className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Chapter 1: Probability Fundamentals - Plots and Code</h1>
      <p className="mb-8">This page displays the key plots generated for Chapter 1, along with explanations and the Python code used to create them. All plots are rendered in grayscale as they appear in the book.</p>

      <div className="space-y-12">
        {plots.map((plot) => (
          <div key={plot.id} className="border rounded-lg p-6 shadow-md bg-card">
            <h2 className="text-2xl font-semibold mb-4">{plot.title}</h2>
            <p className="mb-4 text-muted-foreground">{plot.description}</p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-start">
              {/* Image(s) */}
              <div className={`flex ${Array.isArray(plot.image) ? 'flex-col space-y-4' : ''} items-center justify-center bg-muted p-4 rounded`}>
                {Array.isArray(plot.image) ? (
                  plot.image.map((imgSrc, index) => (
                    <div key={index} className="relative w-full" style={{ paddingTop: '75%' }}> {/* Adjust aspect ratio as needed */}
                      <Image
                        src={imgSrc}
                        alt={`${plot.title} - Plot ${index + 1}`}
                        fill
                        style={{ objectFit: "contain" }}
                        className="rounded"
                      />
                    </div>
                  ))
                ) : (
                  <div className="relative w-full" style={{ paddingTop: '75%' }}> {/* Adjust aspect ratio as needed */}
                    <Image
                      src={plot.image}
                      alt={plot.title}
                      fill
                      style={{ objectFit: "contain" }}
                      className="rounded"
                    />
                  </div>
                )}
              </div>

              {/* Code */}
              <div className="max-h-[400px] overflow-auto">
                <Accordion type="single" collapsible className="w-full">
                  <AccordionItem value="item-1">
                    <AccordionTrigger>View Python Code</AccordionTrigger>
                    <AccordionContent>
                      <SyntaxHighlighter language="python" style={coldarkDark} customStyle={{ margin: 0 }}>
                        {plot.code.trim()}
                      </SyntaxHighlighter>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          </div>
        ))}
      </div>
    </main>
  );
}

